$date
	Fri Sep 21 14:14:39 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module structuralMultiplexer $end
$var wire 1 ! A1andA0 $end
$var wire 1 " A1andnA0 $end
$var wire 1 # address0 $end
$var wire 1 $ address1 $end
$var wire 1 % in0 $end
$var wire 1 & in1 $end
$var wire 1 ' in2 $end
$var wire 1 ( in3 $end
$var wire 1 ) nA0 $end
$var wire 1 * nA1 $end
$var wire 1 + nA1andA0 $end
$var wire 1 , nA1andnA0 $end
$var wire 1 - o0 $end
$var wire 1 . o1 $end
$var wire 1 / o2 $end
$var wire 1 0 o3 $end
$var wire 1 1 out $end
$upscope $end
$scope module testMultiplexer $end
$var wire 1 2 out $end
$var reg 1 3 addr0 $end
$var reg 1 4 addr1 $end
$var reg 1 5 in0 $end
$var reg 1 6 in1 $end
$var reg 1 7 in2 $end
$var reg 1 8 in3 $end
$scope module multiplexer $end
$var wire 2 9 address [1:0] $end
$var wire 1 : address0 $end
$var wire 1 ; address1 $end
$var wire 1 < in0 $end
$var wire 1 = in1 $end
$var wire 1 > in2 $end
$var wire 1 ? in3 $end
$var wire 4 @ inputs [3:0] $end
$var wire 1 2 out $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1111 @
1?
1>
1=
1<
0;
0:
b0 9
18
17
16
15
04
03
12
z1
x0
x/
x.
x-
x,
x+
x*
x)
z(
z'
z&
z%
z$
z#
x"
x!
$end
#1000000
05
0<
02
b1110 @
#2000000
15
1<
b1111 @
14
1;
12
b10 9
#3000000
07
0>
02
b1011 @
#4000000
17
1>
b1111 @
04
0;
13
1:
12
b1 9
#5000000
06
0=
02
b1101 @
#6000000
16
1=
b1111 @
14
1;
12
b11 9
#7000000
08
0?
02
b111 @
#8000000
